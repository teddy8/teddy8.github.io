---
layout: post   
title:  " C++ STL 덱(deque) "
categories: C/C++
comments: true
tags: c++ c stl deque 덱 
author: teddy8  
---
* content
{:toc}

## deque
---
주로 이럴 때 사용합니다.
```
앞과 뒤에서 삽입, 삭제를 자주 할 때 ( 중간에서의 삽입, 삭제는 좋지 않음 )
검색을 거의 하지 않을 때
랜덤 액세스를 해야할 때
서버처럼 받은 패킷들을 차례대로 처리할 때 (이 경우는 deque가 아닌 자체 자료구조를 만들어 사용하기도 함)
```

예제 소스코드(1)
``` c++
#include <iostream>
#include <vector>

using namespace std;

int main() {
	vector<int> vec;
	vec.push_back(10);  // 맨 뒤에 10 추가
	vec.push_back(20);  // 맨 뒤에 20 추가
	vec.push_back(30);  // 맨 뒤에 30 추가
	vec.push_back(40);  // 맨 뒤에 40 추가

	for (vector<int>::size_type i = 0; i < vec.size(); i++) {
		std::cout << "vec 의 " << i + 1 << " 번째 원소 :: " << vec[i] << std::endl;
	}
}
```

```
[map]
삽입과 동시에 정렬해야할 때
많은 데이터를 보관해야 하고, 검색이 빨라야 할 때
데이터 삽입, 삭제가 적을 때

key와 value의 쌍을 원소로 저장하며,(pair 사용) key는 중복될 수 없다. (중복 key를 저장해야 한다면 multimap)
데이터가 적다면 메모리 낭비와 검색시 오버헤드가 존재한다.

[set]
삽입과 동시에 정렬해야 할 때
많은 데이터를 보관해야 하고, 검색이 빨라야 할 때
많은 데이터가 중복 되어서는 안 되며 빠른 검색으로 key의 존재 여부를 신속하게 알고 싶을때
(중복 key를 저장해야 한다면 multiset)


```
